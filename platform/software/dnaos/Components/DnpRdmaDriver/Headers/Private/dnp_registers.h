#ifndef __DNP_REGISTERS_H__
#define __DNP_REGISTERS_H__

/*
 * Taken from INFN version
 */


enum shifts {
  REG_ID = 2,
  REG_TYPE = 6,
  BLOCK_ID = 7,
};
    
// blocks
enum block_id {
  GLOBAL_ADD = 0,
  ENGINE_ADD = 1,
  ROUTER_ADD = 2,
  ARBITER_ADD = 3,
  RDMA_ADD = 4,
  M0_ADD = 5,
  M1_ADD = 6,
  CM0_ADD = 22,
  CM1_ADD = 23,
  S0_ADD = 7,
  CXP_ADD = 8,
  CXM_ADD = 10,
  CYP_ADD = 12,
  CYM_ADD = 14,
  CZP_ADD = 16,
  CZM_ADD = 18,
  CC_ADD = 20,
  SDXP_ADD = 9,
  SDXM_ADD = 11,
  SDYP_ADD = 13,
  SDYM_ADD = 15,
  SDZP_ADD = 17,
  SDZM_ADD = 19,
  SDC_ADD = 21,
  NOC_ADD = 24,
  DNI_ADD = 25,
  AHBM0_ADD = 26,
  AHBM1_ADD = 27,
  INTR_VECT_ADD = 31,
  INTRATMST_ADD = 28,
};

// types
enum types_id {
  REG_CONF = 0,
  REG_STATUS = 1,
};

//sub_regs
enum sub_regs {
  MCFG1_ADD = ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  MCFG2_ADD = ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  MCFG3_ADD = ( REG_CONF << REG_TYPE) + (2 << REG_ID),
  MCFG4_ADD = ( REG_CONF << REG_TYPE) + (3 << REG_ID),
  MSEM_ADD = ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  MFWD_ADD = ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  MSTS_ADD = ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CM_CFG1_ADD = ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CM_CFG2_ADD = ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CM_EXC_ADD = ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CM_STS_ADD = ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CM_CTH_ADD = ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CM_CTD_ADD = ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CM_CRH_ADD = ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CM_CRD_ADD = ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CHCFG1_ADD = ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CHCFG2_ADD = ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CHEXC_ADD = ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CHSTS_ADD = ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CHCTH_ADD = ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CHCTD_ADD = ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CHCRH0_ADD = ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CHCRD0_ADD = ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CHCRH1_ADD = ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  CHCRD1_ADD = ( REG_STATUS << REG_TYPE) + (7 << REG_ID),
  SDCFG1_ADD = ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  SDCFG2_ADD = ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  SDEXC_ADD = ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  SDRX1_ADD = ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  SDRX2_ADD = ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  SDDES_ADD = ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  SDTX1_ADD = ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  SDTX2_ADD = ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  SDSER_ADD = ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  AHBMSTS_ADD = ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  AHBMEXC_ADD = ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
};

// regs
enum registers {
  GLBCFG_ADD = (GLOBAL_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  GLBCFG2_ADD = (GLOBAL_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  GLBMAXH_ADD = (GLOBAL_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (2 << REG_ID),
  ENGCFG1_ADD = (ENGINE_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  ENGCFG2_ADD = (ENGINE_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  ENGEXC_ADD = (ENGINE_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  ENGFWD_ADD = (ENGINE_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  RTRCFG1_ADD = (ROUTER_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  RTREXC1_ADD = (ROUTER_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  RTREXC2_ADD = (ROUTER_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  ARBCFG1_ADD = (ARBITER_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  ARBCFG2_ADD = (ARBITER_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  ARBSTS1_ADD = (ARBITER_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  ARBSTS2_ADD = (ARBITER_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  RDMACFG1_ADD = (RDMA_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  RDMACFG2_ADD = (RDMA_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  RDMACFG3_ADD = (RDMA_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (2 << REG_ID),
  RDMACFG4_ADD = (RDMA_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (3 << REG_ID),
  RDMAEXC_ADD = (RDMA_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  RDMASTS1_ADD = (RDMA_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  S0STS_ADD = (S0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  S0EXC_ADD = (S0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  S0CFG_ADD = (S0_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  NOCCFG1_ADD = (NOC_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  NOCCFG2_ADD = (NOC_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  NOCEXC_ADD = (NOC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  NOCSTS_ADD = (NOC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  NOCCTH_ADD = (NOC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  NOCCTD_ADD = (NOC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  NOCCRH_ADD = (NOC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  NOCCRD_ADD = (NOC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  DNICFG1_ADD = (DNI_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  DNIEXC_ADD = (DNI_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  DNISTS1_ADD = (DNI_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  DNISTS2_ADD = (DNI_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  DNISTS3_ADD = (DNI_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  DNISTS4_ADD = (DNI_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  INTRCFG1_ADD = (INTR_VECT_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  INTRSTS1_ADD = (INTR_VECT_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  INTM_CFG1_ADD = (INTRATMST_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
};

// cregs
enum composed_registers {
  M0CFG1_ADD = (M0_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  M0CFG2_ADD = (M0_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  M0CFG3_ADD = (M0_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (2 << REG_ID),
  M0CFG4_ADD = (M0_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (3 << REG_ID),
  M0SEM_ADD = (M0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  M0FWD_ADD = (M0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  M0STS_ADD = (M0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  M1CFG1_ADD = (M1_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  M1CFG2_ADD = (M1_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  M1CFG3_ADD = (M1_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (2 << REG_ID),
  M1CFG4_ADD = (M1_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (3 << REG_ID),
  M1SEM_ADD = (M1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  M1FWD_ADD = (M1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  M1STS_ADD = (M1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CM0_CFG1_ADD = (CM0_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CM0_CFG2_ADD = (CM0_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CM0_EXC_ADD = (CM0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CM0_STS_ADD = (CM0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CM0_CTH_ADD = (CM0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CM0_CTD_ADD = (CM0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CM0_CRH_ADD = (CM0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CM0_CRD_ADD = (CM0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CM1_CFG1_ADD = (CM1_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CM1_CFG2_ADD = (CM1_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CM1_EXC_ADD = (CM1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CM1_STS_ADD = (CM1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CM1_CTH_ADD = (CM1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CM1_CTD_ADD = (CM1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CM1_CRH_ADD = (CM1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CM1_CRD_ADD = (CM1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CXPCFG1_ADD = (CXP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CXPCFG2_ADD = (CXP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CXPEXC_ADD = (CXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CXPSTS_ADD = (CXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CXPCTH_ADD = (CXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CXPCTD_ADD = (CXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CXPCRH0_ADD = (CXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CXPCRD0_ADD = (CXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CXPCRH1_ADD = (CXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  CXPCRD1_ADD = (CXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (7 << REG_ID),
  CXMCFG1_ADD = (CXM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CXMCFG2_ADD = (CXM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CXMEXC_ADD = (CXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CXMSTS_ADD = (CXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CXMCTH_ADD = (CXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CXMCTD_ADD = (CXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CXMCRH0_ADD = (CXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CXMCRD0_ADD = (CXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CXMCRH1_ADD = (CXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  CXMCRD1_ADD = (CXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (7 << REG_ID),
  CYPCFG1_ADD = (CYP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CYPCFG2_ADD = (CYP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CYPEXC_ADD = (CYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CYPSTS_ADD = (CYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CYPCTH_ADD = (CYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CYPCTD_ADD = (CYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CYPCRH0_ADD = (CYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CYPCRD0_ADD = (CYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CYPCRH1_ADD = (CYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  CYPCRD1_ADD = (CYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (7 << REG_ID),
  CYMCFG1_ADD = (CYM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CYMCFG2_ADD = (CYM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CYMEXC_ADD = (CYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CYMSTS_ADD = (CYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CYMCTH_ADD = (CYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CYMCTD_ADD = (CYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CYMCRH0_ADD = (CYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CYMCRD0_ADD = (CYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CYMCRH1_ADD = (CYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  CYMCRD1_ADD = (CYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (7 << REG_ID),
  CZPCFG1_ADD = (CZP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CZPCFG2_ADD = (CZP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CZPEXC_ADD = (CZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CZPSTS_ADD = (CZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CZPCTH_ADD = (CZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CZPCTD_ADD = (CZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CZPCRH0_ADD = (CZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CZPCRD0_ADD = (CZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CZPCRH1_ADD = (CZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  CZPCRD1_ADD = (CZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (7 << REG_ID),
  CZMCFG1_ADD = (CZM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CZMCFG2_ADD = (CZM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CZMEXC_ADD = (CZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CZMSTS_ADD = (CZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CZMCTH_ADD = (CZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CZMCTD_ADD = (CZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CZMCRH0_ADD = (CZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CZMCRD0_ADD = (CZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CZMCRH1_ADD = (CZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  CZMCRD1_ADD = (CZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (7 << REG_ID),
  CCCFG1_ADD = (CC_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  CCCFG2_ADD = (CC_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  CCEXC_ADD = (CC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  CCSTS_ADD = (CC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  CCCTH_ADD = (CC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  CCCTD_ADD = (CC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  CCCRH0_ADD = (CC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  CCCRD0_ADD = (CC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  CCCRH1_ADD = (CC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  CCCRD1_ADD = (CC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (7 << REG_ID),
  SDXPCFG1_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  SDXPCFG2_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  SDXPEXC_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  SDXPRX1_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  SDXPRX2_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  SDXPDES_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  SDXPTX1_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  SDXPTX2_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  SDXPSER_ADD = (SDXP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  SDXMCFG1_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  SDXMCFG2_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  SDXMEXC_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  SDXMRX1_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  SDXMRX2_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  SDXMDES_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  SDXMTX1_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  SDXMTX2_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  SDXMSER_ADD = (SDXM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  SDYPCFG1_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  SDYPCFG2_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  SDYPEXC_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  SDYPRX1_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  SDYPRX2_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  SDYPDES_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  SDYPTX1_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  SDYPTX2_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  SDYPSER_ADD = (SDYP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  SDYMCFG1_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  SDYMCFG2_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  SDYMEXC_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  SDYMRX1_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  SDYMRX2_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  SDYMDES_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  SDYMTX1_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  SDYMTX2_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  SDYMSER_ADD = (SDYM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  SDZPCFG1_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  SDZPCFG2_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  SDZPEXC_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  SDZPRX1_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  SDZPRX2_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  SDZPDES_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  SDZPTX1_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  SDZPTX2_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  SDZPSER_ADD = (SDZP_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  SDZMCFG1_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  SDZMCFG2_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  SDZMEXC_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  SDZMRX1_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  SDZMRX2_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  SDZMDES_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  SDZMTX1_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  SDZMTX2_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  SDZMSER_ADD = (SDZM_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  SDCCFG1_ADD = (SDC_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (0 << REG_ID),
  SDCCFG2_ADD = (SDC_ADD << BLOCK_ID) + ( REG_CONF << REG_TYPE) + (1 << REG_ID),
  SDCEXC_ADD = (SDC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  SDCRX1_ADD = (SDC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  SDCRX2_ADD = (SDC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (2 << REG_ID),
  SDCDES_ADD = (SDC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (3 << REG_ID),
  SDCTX1_ADD = (SDC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (4 << REG_ID),
  SDCTX2_ADD = (SDC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (5 << REG_ID),
  SDCSER_ADD = (SDC_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (6 << REG_ID),
  AHBM0STS_ADD = (AHBM0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  AHBM0EXC_ADD = (AHBM0_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
  AHBM1STS_ADD = (AHBM1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (0 << REG_ID),
  AHBM1EXC_ADD = (AHBM1_ADD << BLOCK_ID) + ( REG_STATUS << REG_TYPE) + (1 << REG_ID),
};

//reg indexes
enum register_indexes {

//REGISTERS
  GLBCFG_IDX = (GLBCFG_ADD>>2),
  GLBCFG2_IDX = (GLBCFG2_ADD>>2),
  GLBMAXH_IDX = (GLBMAXH_ADD>>2),
  ENGCFG1_IDX = (ENGCFG1_ADD>>2),
  ENGCFG2_IDX = (ENGCFG2_ADD>>2),
  ENGEXC_IDX = (ENGEXC_ADD>>2),
  ENGFWD_IDX = (ENGFWD_ADD>>2),
  RTRCFG1_IDX = (RTRCFG1_ADD>>2),
  RTREXC1_IDX = (RTREXC1_ADD>>2),
  RTREXC2_IDX = (RTREXC2_ADD>>2),
  ARBCFG1_IDX = (ARBCFG1_ADD>>2),
  ARBCFG2_IDX = (ARBCFG2_ADD>>2),
  ARBSTS1_IDX = (ARBSTS1_ADD>>2),
  ARBSTS2_IDX = (ARBSTS2_ADD>>2),
  RDMACFG1_IDX = (RDMACFG1_ADD>>2),
  RDMACFG2_IDX = (RDMACFG2_ADD>>2),
  RDMACFG3_IDX = (RDMACFG3_ADD>>2),
  RDMACFG4_IDX = (RDMACFG4_ADD>>2),
  RDMAEXC_IDX = (RDMAEXC_ADD>>2),
  RDMASTS1_IDX = (RDMASTS1_ADD>>2),
  S0STS_IDX = (S0STS_ADD>>2),
  S0EXC_IDX = (S0EXC_ADD>>2),
  S0CFG_IDX = (S0CFG_ADD>>2),
  NOCCFG1_IDX = (NOCCFG1_ADD>>2),
  NOCCFG2_IDX = (NOCCFG2_ADD>>2),
  NOCEXC_IDX = (NOCEXC_ADD>>2),
  NOCSTS_IDX = (NOCSTS_ADD>>2),
  NOCCTH_IDX = (NOCCTH_ADD>>2),
  NOCCTD_IDX = (NOCCTD_ADD>>2),
  NOCCRH_IDX = (NOCCRH_ADD>>2),
  NOCCRD_IDX = (NOCCRD_ADD>>2),
  DNICFG1_IDX = (DNICFG1_ADD>>2),
  DNIEXC_IDX = (DNIEXC_ADD>>2),
  DNISTS1_IDX = (DNISTS1_ADD>>2),
  DNISTS2_IDX = (DNISTS2_ADD>>2),
  DNISTS3_IDX = (DNISTS3_ADD>>2),
  DNISTS4_IDX = (DNISTS4_ADD>>2),
  INTRCFG1_IDX = (INTRCFG1_ADD>>2),
  INTRSTS1_IDX = (INTRSTS1_ADD>>2),
  INTM_CFG1_IDX = (INTM_CFG1_ADD>>2),

//COMPOSED REGISTERS
  M0CFG1_IDX = (M0CFG1_ADD>>2),
  M0CFG2_IDX = (M0CFG2_ADD>>2),
  M0CFG3_IDX = (M0CFG3_ADD>>2),
  M0CFG4_IDX = (M0CFG4_ADD>>2),
  M0SEM_IDX = (M0SEM_ADD>>2),
  M0FWD_IDX = (M0FWD_ADD>>2),
  M0STS_IDX = (M0STS_ADD>>2),
  M1CFG1_IDX = (M1CFG1_ADD>>2),
  M1CFG2_IDX = (M1CFG2_ADD>>2),
  M1CFG3_IDX = (M1CFG3_ADD>>2),
  M1CFG4_IDX = (M1CFG4_ADD>>2),
  M1SEM_IDX = (M1SEM_ADD>>2),
  M1FWD_IDX = (M1FWD_ADD>>2),
  M1STS_IDX = (M1STS_ADD>>2),
  CM0_CFG1_IDX = (CM0_CFG1_ADD>>2),
  CM0_CFG2_IDX = (CM0_CFG2_ADD>>2),
  CM0_EXC_IDX = (CM0_EXC_ADD>>2),
  CM0_STS_IDX = (CM0_STS_ADD>>2),
  CM0_CTH_IDX = (CM0_CTH_ADD>>2),
  CM0_CTD_IDX = (CM0_CTD_ADD>>2),
  CM0_CRH_IDX = (CM0_CRH_ADD>>2),
  CM0_CRD_IDX = (CM0_CRD_ADD>>2),
  CM1_CFG1_IDX = (CM1_CFG1_ADD>>2),
  CM1_CFG2_IDX = (CM1_CFG2_ADD>>2),
  CM1_EXC_IDX = (CM1_EXC_ADD>>2),
  CM1_STS_IDX = (CM1_STS_ADD>>2),
  CM1_CTH_IDX = (CM1_CTH_ADD>>2),
  CM1_CTD_IDX = (CM1_CTD_ADD>>2),
  CM1_CRH_IDX = (CM1_CRH_ADD>>2),
  CM1_CRD_IDX = (CM1_CRD_ADD>>2),
  CXPCFG1_IDX = (CXPCFG1_ADD>>2),
  CXPCFG2_IDX = (CXPCFG2_ADD>>2),
  CXPEXC_IDX = (CXPEXC_ADD>>2),
  CXPSTS_IDX = (CXPSTS_ADD>>2),
  CXPCTH_IDX = (CXPCTH_ADD>>2),
  CXPCTD_IDX = (CXPCTD_ADD>>2),
  CXPCRH0_IDX = (CXPCRH0_ADD>>2),
  CXPCRD0_IDX = (CXPCRD0_ADD>>2),
  CXPCRH1_IDX = (CXPCRH1_ADD>>2),
  CXPCRD1_IDX = (CXPCRD1_ADD>>2),
  CXMCFG1_IDX = (CXMCFG1_ADD>>2),
  CXMCFG2_IDX = (CXMCFG2_ADD>>2),
  CXMEXC_IDX = (CXMEXC_ADD>>2),
  CXMSTS_IDX = (CXMSTS_ADD>>2),
  CXMCTH_IDX = (CXMCTH_ADD>>2),
  CXMCTD_IDX = (CXMCTD_ADD>>2),
  CXMCRH0_IDX = (CXMCRH0_ADD>>2),
  CXMCRD0_IDX = (CXMCRD0_ADD>>2),
  CXMCRH1_IDX = (CXMCRH1_ADD>>2),
  CXMCRD1_IDX = (CXMCRD1_ADD>>2),
  CYPCFG1_IDX = (CYPCFG1_ADD>>2),
  CYPCFG2_IDX = (CYPCFG2_ADD>>2),
  CYPEXC_IDX = (CYPEXC_ADD>>2),
  CYPSTS_IDX = (CYPSTS_ADD>>2),
  CYPCTH_IDX = (CYPCTH_ADD>>2),
  CYPCTD_IDX = (CYPCTD_ADD>>2),
  CYPCRH0_IDX = (CYPCRH0_ADD>>2),
  CYPCRD0_IDX = (CYPCRD0_ADD>>2),
  CYPCRH1_IDX = (CYPCRH1_ADD>>2),
  CYPCRD1_IDX = (CYPCRD1_ADD>>2),
  CYMCFG1_IDX = (CYMCFG1_ADD>>2),
  CYMCFG2_IDX = (CYMCFG2_ADD>>2),
  CYMEXC_IDX = (CYMEXC_ADD>>2),
  CYMSTS_IDX = (CYMSTS_ADD>>2),
  CYMCTH_IDX = (CYMCTH_ADD>>2),
  CYMCTD_IDX = (CYMCTD_ADD>>2),
  CYMCRH0_IDX = (CYMCRH0_ADD>>2),
  CYMCRD0_IDX = (CYMCRD0_ADD>>2),
  CYMCRH1_IDX = (CYMCRH1_ADD>>2),
  CYMCRD1_IDX = (CYMCRD1_ADD>>2),
  CZPCFG1_IDX = (CZPCFG1_ADD>>2),
  CZPCFG2_IDX = (CZPCFG2_ADD>>2),
  CZPEXC_IDX = (CZPEXC_ADD>>2),
  CZPSTS_IDX = (CZPSTS_ADD>>2),
  CZPCTH_IDX = (CZPCTH_ADD>>2),
  CZPCTD_IDX = (CZPCTD_ADD>>2),
  CZPCRH0_IDX = (CZPCRH0_ADD>>2),
  CZPCRD0_IDX = (CZPCRD0_ADD>>2),
  CZPCRH1_IDX = (CZPCRH1_ADD>>2),
  CZPCRD1_IDX = (CZPCRD1_ADD>>2),
  CZMCFG1_IDX = (CZMCFG1_ADD>>2),
  CZMCFG2_IDX = (CZMCFG2_ADD>>2),
  CZMEXC_IDX = (CZMEXC_ADD>>2),
  CZMSTS_IDX = (CZMSTS_ADD>>2),
  CZMCTH_IDX = (CZMCTH_ADD>>2),
  CZMCTD_IDX = (CZMCTD_ADD>>2),
  CZMCRH0_IDX = (CZMCRH0_ADD>>2),
  CZMCRD0_IDX = (CZMCRD0_ADD>>2),
  CZMCRH1_IDX = (CZMCRH1_ADD>>2),
  CZMCRD1_IDX = (CZMCRD1_ADD>>2),
  CCCFG1_IDX = (CCCFG1_ADD>>2),
  CCCFG2_IDX = (CCCFG2_ADD>>2),
  CCEXC_IDX = (CCEXC_ADD>>2),
  CCSTS_IDX = (CCSTS_ADD>>2),
  CCCTH_IDX = (CCCTH_ADD>>2),
  CCCTD_IDX = (CCCTD_ADD>>2),
  CCCRH0_IDX = (CCCRH0_ADD>>2),
  CCCRD0_IDX = (CCCRD0_ADD>>2),
  CCCRH1_IDX = (CCCRH1_ADD>>2),
  CCCRD1_IDX = (CCCRD1_ADD>>2),
  SDXPCFG1_IDX = (SDXPCFG1_ADD>>2),
  SDXPCFG2_IDX = (SDXPCFG2_ADD>>2),
  SDXPEXC_IDX = (SDXPEXC_ADD>>2),
  SDXPRX1_IDX = (SDXPRX1_ADD>>2),
  SDXPRX2_IDX = (SDXPRX2_ADD>>2),
  SDXPDES_IDX = (SDXPDES_ADD>>2),
  SDXPTX1_IDX = (SDXPTX1_ADD>>2),
  SDXPTX2_IDX = (SDXPTX2_ADD>>2),
  SDXPSER_IDX = (SDXPSER_ADD>>2),
  SDXMCFG1_IDX = (SDXMCFG1_ADD>>2),
  SDXMCFG2_IDX = (SDXMCFG2_ADD>>2),
  SDXMEXC_IDX = (SDXMEXC_ADD>>2),
  SDXMRX1_IDX = (SDXMRX1_ADD>>2),
  SDXMRX2_IDX = (SDXMRX2_ADD>>2),
  SDXMDES_IDX = (SDXMDES_ADD>>2),
  SDXMTX1_IDX = (SDXMTX1_ADD>>2),
  SDXMTX2_IDX = (SDXMTX2_ADD>>2),
  SDXMSER_IDX = (SDXMSER_ADD>>2),
  SDYPCFG1_IDX = (SDYPCFG1_ADD>>2),
  SDYPCFG2_IDX = (SDYPCFG2_ADD>>2),
  SDYPEXC_IDX = (SDYPEXC_ADD>>2),
  SDYPRX1_IDX = (SDYPRX1_ADD>>2),
  SDYPRX2_IDX = (SDYPRX2_ADD>>2),
  SDYPDES_IDX = (SDYPDES_ADD>>2),
  SDYPTX1_IDX = (SDYPTX1_ADD>>2),
  SDYPTX2_IDX = (SDYPTX2_ADD>>2),
  SDYPSER_IDX = (SDYPSER_ADD>>2),
  SDYMCFG1_IDX = (SDYMCFG1_ADD>>2),
  SDYMCFG2_IDX = (SDYMCFG2_ADD>>2),
  SDYMEXC_IDX = (SDYMEXC_ADD>>2),
  SDYMRX1_IDX = (SDYMRX1_ADD>>2),
  SDYMRX2_IDX = (SDYMRX2_ADD>>2),
  SDYMDES_IDX = (SDYMDES_ADD>>2),
  SDYMTX1_IDX = (SDYMTX1_ADD>>2),
  SDYMTX2_IDX = (SDYMTX2_ADD>>2),
  SDYMSER_IDX = (SDYMSER_ADD>>2),
  SDZPCFG1_IDX = (SDZPCFG1_ADD>>2),
  SDZPCFG2_IDX = (SDZPCFG2_ADD>>2),
  SDZPEXC_IDX = (SDZPEXC_ADD>>2),
  SDZPRX1_IDX = (SDZPRX1_ADD>>2),
  SDZPRX2_IDX = (SDZPRX2_ADD>>2),
  SDZPDES_IDX = (SDZPDES_ADD>>2),
  SDZPTX1_IDX = (SDZPTX1_ADD>>2),
  SDZPTX2_IDX = (SDZPTX2_ADD>>2),
  SDZPSER_IDX = (SDZPSER_ADD>>2),
  SDZMCFG1_IDX = (SDZMCFG1_ADD>>2),
  SDZMCFG2_IDX = (SDZMCFG2_ADD>>2),
  SDZMEXC_IDX = (SDZMEXC_ADD>>2),
  SDZMRX1_IDX = (SDZMRX1_ADD>>2),
  SDZMRX2_IDX = (SDZMRX2_ADD>>2),
  SDZMDES_IDX = (SDZMDES_ADD>>2),
  SDZMTX1_IDX = (SDZMTX1_ADD>>2),
  SDZMTX2_IDX = (SDZMTX2_ADD>>2),
  SDZMSER_IDX = (SDZMSER_ADD>>2),
  SDCCFG1_IDX = (SDCCFG1_ADD>>2),
  SDCCFG2_IDX = (SDCCFG2_ADD>>2),
  SDCEXC_IDX = (SDCEXC_ADD>>2),
  SDCRX1_IDX = (SDCRX1_ADD>>2),
  SDCRX2_IDX = (SDCRX2_ADD>>2),
  SDCDES_IDX = (SDCDES_ADD>>2),
  SDCTX1_IDX = (SDCTX1_ADD>>2),
  SDCTX2_IDX = (SDCTX2_ADD>>2),
  SDCSER_IDX = (SDCSER_ADD>>2),
  AHBM0STS_IDX = (AHBM0STS_ADD>>2),
  AHBM0EXC_IDX = (AHBM0EXC_ADD>>2),
  AHBM1STS_IDX = (AHBM1STS_ADD>>2),
  AHBM1EXC_IDX = (AHBM1EXC_ADD>>2),

//SUB-REGISTERS
  MCFG1_IDX = ( MCFG1_ADD >>2),
  MCFG2_IDX = ( MCFG2_ADD >>2),
  MCFG3_IDX = ( MCFG3_ADD >>2),
  MCFG4_IDX = ( MCFG4_ADD >>2),
  MSEM_IDX = ( MSEM_ADD >>2),
  MFWD_IDX = ( MFWD_ADD >>2),
  MSTS_IDX = ( MSTS_ADD >>2),
  CM_CFG1_IDX = ( CM_CFG1_ADD >>2),
  CM_CFG2_IDX = ( CM_CFG2_ADD >>2),
  CM_EXC_IDX = ( CM_EXC_ADD >>2),
  CM_STS_IDX = ( CM_STS_ADD >>2),
  CM_CTH_IDX = ( CM_CTH_ADD >>2),
  CM_CTD_IDX = ( CM_CTD_ADD >>2),
  CM_CRH_IDX = ( CM_CRH_ADD >>2),
  CM_CRD_IDX = ( CM_CRD_ADD >>2),
  CHCFG1_IDX = ( CHCFG1_ADD >>2),
  CHCFG2_IDX = ( CHCFG2_ADD >>2),
  CHEXC_IDX = ( CHEXC_ADD >>2),
  CHSTS_IDX = ( CHSTS_ADD >>2),
  CHCTH_IDX = ( CHCTH_ADD >>2),
  CHCTD_IDX = ( CHCTD_ADD >>2),
  CHCRH0_IDX = ( CHCRH0_ADD >>2),
  CHCRD0_IDX = ( CHCRD0_ADD >>2),
  CHCRH1_IDX = ( CHCRH1_ADD >>2),
  CHCRD1_IDX = ( CHCRD1_ADD >>2),
  SDCFG1_IDX = ( SDCFG1_ADD >>2),
  SDCFG2_IDX = ( SDCFG2_ADD >>2),
  SDEXC_IDX = ( SDEXC_ADD >>2),
  SDRX1_IDX = ( SDRX1_ADD >>2),
  SDRX2_IDX = ( SDRX2_ADD >>2),
  SDDES_IDX = ( SDDES_ADD >>2),
  SDTX1_IDX = ( SDTX1_ADD >>2),
  SDTX2_IDX = ( SDTX2_ADD >>2),
  SDSER_IDX = ( SDSER_ADD >>2),
  AHBMSTS_IDX = ( AHBMSTS_ADD >>2),
  AHBMEXC_IDX = ( AHBMEXC_ADD >>2),
};

enum Registers_Masks { 
//GLBCFG1
	DNP_COORDS_M = 0x3FFFF,
	DNP_COORDS_O = 0,

	DNP_COORDS_X_M = 0X3F,
	DNP_COORDS_Y_M = 0XFC0,
	DNP_COORDS_Z_M = 0x3F000,
	//	DNP_COORDS_T_M = 0x3C000,
	DNP_COORDS_X_O = 0,
	DNP_COORDS_Y_O = 6,
	DNP_COORDS_Z_O = 12,
	//	DNP_COORDS_T_O = 14,

	DNP_LATTICE_SIZE_M   = 0xFFFC0000,
	DNP_LATTICE_SIZE_O   = 18,

	DNP_LATTICE_SIZE_X_M = 0X00FC0000,
	DNP_LATTICE_SIZE_Y_M = 0X0F000000,
	DNP_LATTICE_SIZE_Z_M = 0xF0000000,
	DNP_LATTICE_SIZE_X_O = 18,
	DNP_LATTICE_SIZE_Y_O = 24,
	DNP_LATTICE_SIZE_Z_O = 28,

/* //GLBCFG2 */
/* 	CHIP_COORDS_M = 0x3FFF, */
/* 	CHIP_COORDS_O = 0, */

/* 	CHIP_COORDS_X_M = 0X3F, */
/* /\* 	CHIP_COORDS_Y_M = 0XFC0, *\/ */
/* /\* 	CHIP_COORDS_Z_M = 0x3F00, *\/ */
/* 	CHIP_COORDS_Y_M = 0X3C0, */
/* 	CHIP_COORDS_Z_M = 0x3C00, */
/* 	CHIP_COORDS_X_O = 0, */
/* 	CHIP_COORDS_Y_O = 6, */
/* 	CHIP_COORDS_Z_O = 12, */
	
/* 	CHIP_SIZE_M   = 0x0FFFC000, */
/* 	CHIP_SIZE_O   = 14, */

/* 	CHIP_SIZE_X_M = 0X000FC000, */
/* 	CHIP_SIZE_Y_M = 0X00F00000, */
/* 	CHIP_SIZE_Z_M = 0x0F000000, */
/* 	CHIP_SIZE_X_O = 14, */
/* 	CHIP_SIZE_Y_O = 20, */
/* 	CHIP_SIZE_Z_O = 24, */

//GLBMAXH
	MAX_HOPS_M = 0XFF,
	MAX_HOPS_0 = 0,

//ENGCFG2	
	ENGINE_RESET_CMD_FIFO_M = 0x00000020,
	ENGINE_RESET_CMD_FIFO_O = 5,

//ENGEXC
	ENGINE_CMD_ERROR_M     = 0x1,
	ENGINE_CMD_ERROR_O     = 0,
	ENGINE_CMD_ERROR_MSK_M = 0x2,
	ENGINE_CMD_ERROR_MSK_O = 1,

	M1_TOUT_REACHED_EXC_M = 0x4,
	M1_TOUT_REACHED_EXC_O = 2,
	M1_TOUT_REACHED_MSK_M = 0x8,
	M1_TOUT_REACHED_MSK_O = 3,
	
	M0_TOUT_REACHED_EXC_M = 0x10,
	M0_TOUT_REACHED_EXC_O = 4,
	M0_TOUT_REACHED_MSK_M = 0x20,
	M0_TOUT_REACHED_MSK_O = 5,

	CMD_TOUT_REACHED_EXC_M = 0x40,
	CMD_TOUT_REACHED_EXC_O = 6,
	CMD_TOUT_REACHED_MSK_M = 0x80,
	CMD_TOUT_REACHED_MSK_O = 7,

	ENGINE_CMD_FIFO_FULL_EXC_M = 0x100,
	ENGINE_CMD_FIFO_FULL_EXC_0 = 8,
	ENGINE_CMD_FIFO_FULL_MSK_M = 0x200,
	ENGINE_CMD_FIFO_FULL_MSK_O = 9,

	ENGINE_CMDFIFO_ALMOSTFULL_M     = 0x400,
	ENGINE_CMDFIFO_ALMOSTFULL_O     = 10,
	ENGINE_CMDFIFO_ALMOSTFULL_MSK_M = 0x800,
	ENGINE_CMDFIFO_ALMOSTFULL_MSK_O = 11,

//ENGFWD
	ENGINE_FIFOWORD_MSK = 0xffff,
	
//RDMACFG1
	RDMA_RESET_M  = 0x1,
	RDMA_ENABLE_M = 0x2,
	LUT_RESET_M   = 0x4,
	LUT_ENABLE_M  = 0x8,
	RB_RESET_M    = 0x10,
	RB_ENABLE_M   = 0x20,
	RB_RESTART_M  = 0X40,

	RDMA_RESET_O  = 0,
	RDMA_ENABLE_O = 1,
	LUT_RESET_O   = 2,
	LUT_ENABLE_O  = 3,
	RB_RESET_O    = 4,
	RB_ENABLE_O   = 5,
	RB_RESTART_0  = 6,
	
//RDMAEXC
	RDMA_LUT_MISS_M = 0x1,
	RDMA_LUT_MISS_O = 0,
	RDMA_LUT_MISS_MSK_M = 0x2,
	RDMA_LUT_MISS_MSK_0 = 1,

	RDMA_RB_FULL_M = 0x4,
	RDMA_RB_FULL_O = 2,
	RDMA_RB_FULL_MSK_M = 0x8,
	RDMA_RB_FULL_MSK_0 = 3,

	// rise on ( rbnr < rbsa || rbnr > rbea )
	RDMA_BAD_NR_M = 0x10,
	RDMA_BAD_NR_O = 4,
	RDMA_BAD_NR_MSK_M = 0x20,
	RDMA_BAD_NR_MSK_0 = 5,

	// rise on ( rb_len % 8*sizeof(dnp_word_t) != 0 )
	RDMA_BAD_RB_RANGE_M = 0x40,
	RDMA_BAD_RB_RANGE_O = 6,
	RDMA_BAD_RB_RANGE_MSK_M  = 0x80,
	RDMA_BAD_RB_RANGE_MSK_0 = 7,

//RTRCFG
	RTR_PRIORITY_M = 0x1FF,
	RTR_PRIORITY_O = 0,
	RTR_MIN_PRIORITY_M = 0x7,
	RTR_MED_PRIORITY_M = 0x38,
	RTR_MAX_PRIORITY_M = 0x1C0,
	RTR_MIN_PRIORITY_O = 0,
	RTR_MED_PRIORITY_O = 3,
	RTR_MAX_PRIORITY_O = 6,

//RTREXC1
/* 	DEST_OUT_LATTICE_EXC_NOC_M = 0X00000001, */
/* 	DEST_OUT_LATTICE_MSK_NOC_M = 0X00000002, */

	DEST_OUT_LATTICE_EXC_XP_M  = 0X00000004,
	DEST_OUT_LATTICE_MSK_XP_M  = 0X00000008,

	DEST_OUT_LATTICE_EXC_XM_M  = 0X00000010,
	DEST_OUT_LATTICE_MSK_XM_M  = 0X00000020,

	DEST_OUT_LATTICE_EXC_YP_M  = 0X00000040,
	DEST_OUT_LATTICE_MSK_YP_M  = 0X00000080,

	DEST_OUT_LATTICE_EXC_YM_M  = 0X00000100,
	DEST_OUT_LATTICE_MSK_YM_M  = 0X00000200,

	DEST_OUT_LATTICE_EXC_ZP_M  = 0X00000400,
	DEST_OUT_LATTICE_MSK_ZP_M  = 0X00000800,

	DEST_OUT_LATTICE_EXC_ZM_M  = 0X00001000,
	DEST_OUT_LATTICE_MSK_ZM_M  = 0X00002000,

	DEST_OUT_LATTICE_EXC_C_M   = 0X00004000,
	DEST_OUT_LATTICE_MSK_C_M   = 0X00008000,

/* 	DEST_OUT_LATTICE_EXC_NOC_O = 0, */
/* 	DEST_OUT_LATTICE_MSK_NOC_O = 1, */

	DEST_OUT_LATTICE_EXC_XP_O = 2,
	DEST_OUT_LATTICE_MSK_XP_O = 3,

	DEST_OUT_LATTICE_EXC_XM_O = 4,
	DEST_OUT_LATTICE_MSK_XM_O = 5,

	DEST_OUT_LATTICE_EXC_YP_O = 6,
	DEST_OUT_LATTICE_MSK_YP_O = 7,

	DEST_OUT_LATTICE_EXC_YM_O = 8,
	DEST_OUT_LATTICE_MSK_YM_O = 9,

	DEST_OUT_LATTICE_EXC_ZP_O = 10,
	DEST_OUT_LATTICE_MSK_ZP_O = 11,

	DEST_OUT_LATTICE_EXC_ZM_O = 12,
	DEST_OUT_LATTICE_MSK_ZM_O = 13,

	DEST_OUT_LATTICE_EXC_C_O = 14,
	DEST_OUT_LATTICE_MSK_C_O = 15,
	

/* 	REQ_ERROR_EXC_NOC_M = 0X00010000, */
/* 	REQ_ERROR_MSK_NOC_M = 0X00020000, */

	REQ_ERROR_EXC_XP_M  = 0X00040000,
	REQ_ERROR_MSK_XP_M  = 0X00080000,

	REQ_ERROR_EXC_XM_M  = 0X00100000,
	REQ_ERROR_MSK_XM_M  = 0X00200000,

	REQ_ERROR_EXC_YP_M  = 0X00400000,
	REQ_ERROR_MSK_YP_M  = 0X00800000,

	REQ_ERROR_EXC_YM_M  = 0X01000000,
	REQ_ERROR_MSK_YM_M  = 0X02000000,

	REQ_ERROR_EXC_ZP_M  = 0X04000000,
	REQ_ERROR_MSK_ZP_M  = 0X08000000,

	REQ_ERROR_EXC_ZM_M  = 0X10000000,
	REQ_ERROR_MSK_ZM_M  = 0X20000000,

	REQ_ERROR_EXC_C_M   = 0X40000000,
	REQ_ERROR_MSK_C_M   = 0X80000000,

/* 	REQ_ERROR_EXC_NOC_O = 16, */
/* 	REQ_ERROR_MSK_NOC_O = 17, */

	REQ_ERROR_EXC_XP_O = 18,
	REQ_ERROR_MSK_XP_O = 19,

	REQ_ERROR_EXC_XM_O = 20,
	REQ_ERROR_MSK_XM_O = 21,

	REQ_ERROR_EXC_YP_O = 22,
	REQ_ERROR_MSK_YP_O = 23,

	REQ_ERROR_EXC_YM_O = 24,
	REQ_ERROR_MSK_YM_O = 25,

	REQ_ERROR_EXC_ZP_O = 26,
	REQ_ERROR_MSK_ZP_O = 27,

	REQ_ERROR_EXC_ZM_O = 28,
	REQ_ERROR_MSK_ZM_O = 29,

	REQ_ERROR_EXC_C_O = 30,
	REQ_ERROR_MSK_C_O = 31,
	
//RTREXC2
	DEST_OUT_LATTICE_EXC_M0_M = 0X00000001,
	DEST_OUT_LATTICE_MSK_M0_M = 0X00000002,
 
	DEST_OUT_LATTICE_EXC_M1_M = 0X00000004,
	DEST_OUT_LATTICE_MSK_M1_M = 0X00000008,

	DEST_OUT_LATTICE_EXC_M0_O = 0,
	DEST_OUT_LATTICE_MSK_M0_O = 1,

	DEST_OUT_LATTICE_EXC_M1_O = 2,
	DEST_OUT_LATTICE_MSK_M1_O = 3,

	REQ_ERROR_EXC_M0_M   = 0X00000010,
	REQ_ERROR_MSK_M0_M   = 0X00000020,

	REQ_ERROR_EXC_M1_M   = 0X00000040,
	REQ_ERROR_MSK_M1_M   = 0X00000080,

	REQ_ERROR_EXC_M0_O = 4,
	REQ_ERROR_MSK_M0_O = 5,

	REQ_ERROR_EXC_M1_O = 6,
	REQ_ERROR_MSK_M1_O = 7,

	PRIORITY_ERROR_EXC_M = 0x00000100,
	PRIORITY_ERROR_MSK_M = 0x00000200,

	PRIORITY_ERROR_EXC_O = 8,
	PRIORITY_ERROR_MSK_O = 9,
	
	WRONG_LATTICE_SIZE_EXC_M = 0x00000400,
	WRONG_LATTICE_SIZE_MSK_M = 0x00000800,

	WRONG_LATTICE_SIZE_EXC_0 = 10,
	WRONG_LATTICE_SIZE_MSK_0 = 11,
	
/* 	WRONG_CHIP_SIZE_EXC_M = 0x00001000, */
/* 	WRONG_CHIP_SIZE_MSK_M = 0X00002000, */
	
/* 	WRONG_CHIP_SIZE_EXC_0 = 12, */
/* 	WRONG_CHIP_SIZE_MSK_0 = 13, */
//CXXCFG1
	TX_RESET_M       = 0x00000001,
	FIFO_TX_RESET_M  = 0x00000002,
	TX_PORT_ENABLE_M = 0x00000004, 
	RX_RESET_M       = 0x00000008,
	FIFO_RX_RESET_M  = 0x00000010,
	RX_PORT_ENABLE_M = 0x00000020,
	RESYNC_M         = 0x00000040,

	TX_RESET_O       = 0,
	FIFO_TX_RESET_O  = 1,
	TX_PORT_ENABLE_O = 2, 
	RX_RESET_O       = 3,
	FIFO_RX_RESET_O  = 4,
	RX_PORT_ENABLE_O = 5,
	RESYNC_O         = 6,

//CXXCFG2
       ERRORS_PKTS_THRESH_M = 0xffff,
       ERRORS_PKTS_THRESH_O = 0x0,
       CRC_ERRORS_COUNTER_RST_M = 0x10000,
       CRC_ERRORS_COUNTER_RST_O = 16,
       PKTS_COUNTER_RST_M = 0x20000,
       PKTS_COUNTER_RST_O = 17,

	
//CXXEXC
	CH_MAXHOPS_EXC_M = 0x40,
	CH_MAXHOPS_MSK_M = 0x80,

	CH_MAXHOPS_EXC_O = 6,
	CH_MAXHOPS_MSK_O = 7,

       CH_LINK_ACK_TMOUT_REACH_EXC_M = 0x100,
       CH_LINK_ACK_TMOUT_REACH_MSK_M = 0x200,

       CH_LINK_ACK_TMOUT_REACH_EXC_O = 8,
       CH_LINK_ACK_TMOUT_REACH_MSK_O = 9,

//CXXSTS2
       CH_CRCERRORS_COUNTER_M = 0xffffffff,
       CH_CRCERRORS_COUNTER_O = 0x0,

//CXXSTS3

       CH_PKTS_COUNTER_M = 0xffffffff,
       CH_PKTS_COUNTER_O = 0,


//DNICFG1
	DNI_RX_ENABLE_M = 0x1,
	DNI_TX_ENABLE_M = 0x2,
	DNI_RX_ENABLE_O = 0,
	DNI_TX_ENABLE_O = 1,

	/*
//INTRCFG1
	IRQ_TYPE_M               = 0x1,
	IRQ_TYPE_EDGE_TRIGGERED  = 0x0,
	IRQ_TYPE_LEVEL_TRIGGERED = 0x1,
	IRQ_POLARITY_M           = 0x2,
	IRQ_TYPE_O               = 0,
	IRQ_POLARITY_O           = 1,
	*/

//INTRCFG1 //interrupt masks
	IRQ_MASK_M0_EXC_M = 0x1,
	IRQ_MASK_M1_EXC_M = 0x2,
	IRQ_MASK_RDMA_M = 0x4,
	IRQ_MASK_RDMA_EXC_M = 0x8,
	IRQ_MASK_LINK_EXC_XP_M = 0x10,
	IRQ_MASK_LINK_EXC_XM_M = 0x20,
	IRQ_MASK_LINK_EXC_YP_M = 0x40,
	IRQ_MASK_LINK_EXC_YM_M = 0x80,
	IRQ_MASK_LINK_EXC_ZP_M = 0x100,
	IRQ_MASK_LINK_EXC_ZM_M = 0x200,
	IRQ_MASK_ENGINE_EXC_M = 0x400,
	IRQ_MASK_ROUTER_EXC_M = 0x800,

	IRQ_MASK_M0_EXC_O = 1,
	IRQ_MASK_M1_EXC_O = 2,
	IRQ_MASK_RDMA_O = 3,
	IRQ_MASK_RDMA_EXC_O = 4,
	IRQ_MASK_LINK_EXC_XP_O = 5,
	IRQ_MASK_LINK_EXC_XM_O = 6,
	IRQ_MASK_LINK_EXC_YP_O = 7,
	IRQ_MASK_LINK_EXC_YM_O = 8,
	IRQ_MASK_LINK_EXC_ZP_O = 9,
	IRQ_MASK_LINK_EXC_ZM_O = 10,
	IRQ_MASK_ENGINE_EXC_O = 11,
	IRQ_MASK_ROUTER_EXC_O = 12,

//INTRSTS1
	IRQ_M0_EXC_M = 0x1,
	IRQ_M1_EXC_M = 0x2,
	IRQ_RDMA_M = 0x4,
	IRQ_RDMA_EXC_M = 0x8,
	IRQ_LINK_EXC_XP_M = 0x10,
	IRQ_LINK_EXC_XM_M = 0x20,
	IRQ_LINK_EXC_YP_M = 0x40,
	IRQ_LINK_EXC_YM_M = 0x80,
	IRQ_LINK_EXC_ZP_M = 0x100,
	IRQ_LINK_EXC_ZM_M = 0x200,
	IRQ_ENGINE_EXC_M = 0x400,
	IRQ_ROUTER_EXC_M = 0x800,

	IRQ_ALL_IRQ_M = 0xfff,
	IRQ_ALL_EXC_M = 0xffb,

	IRQ_M0_EXC_O = 1,
	IRQ_M1_EXC_O = 2,
	IRQ_RDMA_O = 3,
	IRQ_RDMA_EXC_O = 4,
	IRQ_LINK_EXC_XP_O = 5,
	IRQ_LINK_EXC_XM_O = 6,
	IRQ_LINK_EXC_YP_O = 7,
	IRQ_LINK_EXC_YM_O = 8,
	IRQ_LINK_EXC_ZP_O = 9,
	IRQ_LINK_EXC_ZM_O = 10,
	IRQ_ENGINE_EXC_O = 11,
	IRQ_ROUTER_EXC_O = 12,

#if 0
	IRQ_SERDES0_EXC    = 0X00000001, IRQ_SERDESXP_EXC = IRQ_SERDES0_EXC,
	IRQ_SERDES1_EXC    = 0X00000002, IRQ_SERDESXM_EXC = IRQ_SERDES1_EXC,
	IRQ_SERDES2_EXC    = 0X00000004, IRQ_SERDESYP_EXC = IRQ_SERDES2_EXC,
	IRQ_SERDES3_EXC    = 0X00000008, IRQ_SERDESYM_EXC = IRQ_SERDES3_EXC,
	IRQ_SERDES4_EXC    = 0X00000010, IRQ_SERDESZP_EXC = IRQ_SERDES4_EXC,
	IRQ_SERDES5_EXC    = 0X00000020, IRQ_SERDESZM_EXC = IRQ_SERDES5_EXC,
	IRQ_SERDES6_EXC    = 0X00000040, IRQ_SERDESC_EXC  = IRQ_SERDES6_EXC,

	IRQ_INTERTCH0_EXC  = 0X00000080, IRQ_INTERTCHXP_EXC = IRQ_INTERTCH0_EXC,
	IRQ_INTERTCH1_EXC  = 0X00000100, IRQ_INTERTCHXM_EXC = IRQ_INTERTCH1_EXC,
	IRQ_INTERTCH2_EXC  = 0X00000200, IRQ_INTERTCHYP_EXC = IRQ_INTERTCH2_EXC,
	IRQ_INTERTCH3_EXC  = 0X00000400, IRQ_INTERTCHYM_EXC = IRQ_INTERTCH3_EXC,
	IRQ_INTERTCH4_EXC  = 0X00000800, IRQ_INTERTCHZP_EXC = IRQ_INTERTCH4_EXC,
	IRQ_INTERTCH5_EXC  = 0X00001000, IRQ_INTERTCHZM_EXC = IRQ_INTERTCH5_EXC,
	IRQ_INTERTCH6_EXC  = 0X00002000, IRQ_INTERTCHC_EXC  = IRQ_INTERTCH6_EXC,

	IRQ_NOC_EXC        = 0X00004000,
	IRQ_DNI_EXC        = 0X00008000,
	IRQ_INTRATM0_EXC   = 0X00010000,
	IRQ_INTRATM1_EXC   = 0X00020000,
	IRQ_INTRATCH0_EXC  = 0X00040000,
	IRQ_INTRATCH1_EXC  = 0X00080000,
	IRQ_AHBM0_EXC      = 0X00100000,
	IRQ_AHBM1_EXC      = 0X00200000,
	IRQ_ROUTER_EXC     = 0X00400000,
	IRQ_RDMA_EXC       = 0X00800000,
	IRQ_ENGINE_EXC     = 0X01000000,
#endif

//SD**CFG1
	//SD_RX_THRS_OFW_NACK_BIT  = 0,
	//SD_RX_THRS_OFW_NACK_MASK = 0x1F,

//SD**CFG2
	SD_RESET        = 0x01000000,

//SD**EXC
	SD_RX_OVERFLOW_NACK_EXC             = 0x00000001,
	SD_RX_OVERFLOW_NACK_CNT_MSK         = 0x00000002,
	SD_RX_TIMEOUT_SYNC_EXC              = 0x00000004,
	SD_RX_TIMEOUT_SYNC_EXC_MSK          = 0x00000008,
	SD_RX_WRONG_FLAG_EXC                = 0x00000010,
	SD_RX_WRONG_FLAG_EXC_MSK            = 0x00000020,
	SD_TX_TIMEOUT_ACK_EXC               = 0x00000040,
	SD_TX_TIMEOUT_ACK_EXC_MSK           = 0x00000080,
	SD_TX_TIMEOUT_PAYLOAD_EXC           = 0x00000100,
	SD_TX_TIMEOUT_PAYLOAD_EXC_MSK       = 0x00000200,
	SD_TX_OVERFLOW_REMOTE_NACK_EXC      = 0x00000400,
	SD_TX_OVERFLOW_REMOTE_NACK_EXC_MSK  = 0x00000800,
	SD_TX_DESER_WRONG_CMD_EXC           = 0x00001000,
	SD_TX_DESER_WRONG_CMD_EXC_MSK       = 0x00002000,
	SD_SER_SYNC_DONE                    = 0x00008000,

//SD**SER
	SD_SM_DCB_BLOCK_SER    = 0x00000003,

//SD**DES
	SD_DCB_DESER_STATUS    = 0x00000007,
	SD_RX_TIMEOUT_SYNC_CNT = 0x00007FF8,

//AHBM_EXC
//verificare
//LOFAMO DNP
	LF_ENABLE_M = 0x1,
	LF_ENABLE_O = 0,
	LF_DNPWD_VALID_M = 0x1,
	LF_DNPWD_VALID_O = 0,
	
	LF_DNPWD_REM_HOST_STATUS_ZM_M = 0x2,
	LF_DNPWD_REM_HOST_STATUS_ZM_O = 1,
	LF_DNPWD_REM_HOST_STATUS_ZP_M = 0x4,
	LF_DNPWD_REM_HOST_STATUS_ZP_O = 2,
	LF_DNPWD_REM_HOST_STATUS_YM_M = 0x8,
	LF_DNPWD_REM_HOST_STATUS_YM_O = 3,
	LF_DNPWD_REM_HOST_STATUS_YP_M = 0x10,
	LF_DNPWD_REM_HOST_STATUS_YP_O = 4,
	LF_DNPWD_REM_HOST_STATUS_XM_M = 0x20,
	LF_DNPWD_REM_HOST_STATUS_XM_O = 5,
	LF_DNPWD_REM_HOST_STATUS_XP_M = 0x40,
	LF_DNPWD_REM_HOST_STATUS_XP_O = 6,
	LF_DNPWD_REM_HOST_STATUS_ALL_M = 0x7e,
	LF_DNPWD_REM_HOST_STATUS_ALL_O = 1,

	LF_DNPWD_CORE_STATUS_M = 0x180,
	LF_DNPWD_CORE_STATUS_O = 7,
	LF_DNPWD_POWER_STATUS_M =0x600,
	LF_DNPWD_POWER_STATUS_O = 9,
	LF_DNPWD_VOLTAGE_STATUS_M = 0x1800,
	LF_DNPWD_VOLTAGE_STATUS_O = 11,
	LF_DNPWD_TEMP_STATUS_M = 0x6000,
	LF_DNPWD_TEMP_STATUS_O = 13,
	LF_DNPWD_LINK_STATUS_ZM_M = 0x18000,
	LF_DNPWD_LINK_STATUS_ZM_O = 15,
	LF_DNPWD_LINK_STATUS_ZP_M = 0x60000,
	LF_DNPWD_LINK_STATUS_ZP_O = 17,
	LF_DNPWD_LINK_STATUS_YM_M = 0x180000,
	LF_DNPWD_LINK_STATUS_YM_O = 19,
	LF_DNPWD_LINK_STATUS_YP_M = 0x600000,
	LF_DNPWD_LINK_STATUS_YP_O = 21,
	LF_DNPWD_LINK_STATUS_XM_M = 0x1800000,
	LF_DNPWD_LINK_STATUS_XM_O = 23,
	LF_DNPWD_LINK_STATUS_XP_M = 0x6000000,
	LF_DNPWD_LINK_STATUS_XP_O = 25,
	LF_DNPWD_LINK_STATUS_ALL_M = 0x7ff8000,
	LF_DNPWD_LINK_STATUS_ALL_O = 15,
	//LOFAMO HOST
	
	LF_HOSTWD_VALID_M = 0x1,
	LF_HOSTWD_VALID_O = 0x0,
	LF_HOSTWD_SNET_STATUS_M = 0x6,
	LF_HOSTWD_SNET_STATUS_O = 0x1,
	LF_HOSTWD_MEM_STATUS_M = 0x18,
	LF_HOSTWD_MEM_STATUS_O = 0x3,
	LF_HOSTWD_PERIPH1_STATUS_M = 0x60,
	LF_HOSTWD_PERIPH1_STATUS_O = 0x5,
	LF_HOSTWD_PERIPH2_STATUS_M = 0x180,
	LF_HOSTWD_PERIPH2_STATUS_O = 0x7,
	//TEMP
	
	TEMPSENS_M = 0xff,
	TEMPSENS_O = 0x0,

	TEMPTHRESH_LOW_WARN_M = 0xff,
	TEMPTHRESH_LOW_WARN_O = 0x0,
	TEMPTHRESH_LOW_ALARM_M = 0xff00,
	TEMPTHRESH_LOW_ALARM_O = 0x8,

	TEMPTHRESH_HIGH_WARN_M = 0xff0000,
	TEMPTHRESH_HIGH_WARN_O = 0x10,
	TEMPTHRESH_HIGH_ALARM_M = 0xff000000,
	TEMPTHRESH_HIGH_ALARM_O = 0x18,
	
};


enum dnp_address_boundary {
	DNP_OFFSET_REG_START      = 0,
	DNP_OFFSET_REG_END        = 0xFFF,
	DNP_OFFSET_LUT_START      = 0x1000,
	DNP_OFFSET_LUT_END        = 0x1FFF,
	DNP_OFFSET_CMD_FIFO_START = 0x2000,
	DNP_OFFSET_CMD_FIFO_END   = 0x2FFF,
	//empty space
	DNP_MEM_SIZE = 0x4000,
	DNP_REG_MEM_SIZE          = DNP_OFFSET_REG_END - DNP_OFFSET_REG_START + 1,
	DNP_LUT_MEM_SIZE          = DNP_OFFSET_LUT_END - DNP_OFFSET_LUT_START + 1,
	DNP_CMD_FIFO_MEM_SIZE     = DNP_OFFSET_CMD_FIFO_END - DNP_OFFSET_CMD_FIFO_START + 1,    
};

enum dnp_rdma_lut {
	 DNP_RDMA_LUT_LOG_NENTRIES=4,                        // LUT entries = 2**ADD_WIDTH
	 DNP_RDMA_LUT_NENTRIES=1<<DNP_RDMA_LUT_LOG_NENTRIES,        
	 DNP_RDMA_LUT_WIDTH=128,                             // 4*32 bit per location
	 DNP_RDMA_LUT_DATA_WIDTH=DNP_RDMA_LUT_WIDTH/sizeof(uint32_t), // in 32bit words
	 
	 DNP_RDMA_LUT_FLAG_VALID      = (1<<0),
	 DNP_RDMA_LUT_FLAG_STREAMING  = (1<<1),
	 DNP_RDMA_LUT_FLAG_GEN_PUT    = (1<<2),
	 DNP_RDMA_LUT_FLAG_GEN_GETREQ = (1<<3),
	 DNP_RDMA_LUT_FLAG_GEN_GETRESP= (1<<4),
	 DNP_RDMA_LUT_FLAG_RDMA_EVENT = (1<<5),
};

#if 0

/* LUT  Don't change these DNP-dependant settings!!*/
#define DNP_RDMA_LUT_NENTRIES  16
#define DNP_RDMA_MAILBOX_NENTRIES  100
#define DNP_LUT_START_OFFSET 1024
#define DNP_LUT_END_OFFSET   2047
#define DNP_LUT_ENTRY_SIZE   16

#endif

#endif /* __DNP_REGISTERS_H__ */
