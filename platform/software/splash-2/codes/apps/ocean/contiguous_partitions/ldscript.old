ENTRY (_start)
/* STARTUP(crt0.o) */
GROUP(-lc -lm -lgcc)

MEMORY
{
	text :    ORIGIN = 0x00000000,    LENGTH = 0x01000000
}

SECTIONS
{
	.debug_aranges 0x0 : { *(.debug_aranges*) } 
	.debug_info 0x0 : { *(.debug_info*) } 
	.debug_abbrev 0x0 : { *(.debug_abbrev*) } 
	.debug_line 0x0 : { *(.debug_line*) } 
	.debug_ranges 0x0 : { *(.debug_ranges*) } 
	.debug_str 0x0 : { *(.debug_str*) } 
	.debug_frame 0x0 : { *(.debug_frame*) } 
	.debug_loc 0x0 : { *(.debug_loc*) } 
	.debug_pubnames 0x0 : { *(.debug_pubnames*) } 
	.pdr 0x0 : { *(.pdr*) } 
	.comment 0x0 : { *(.comment*) } 
	.gnu.attributes 0x0 : { *(.gnu.attributes*) } 

	.reset 0x00000000 : { *(.reset) } > text 

	.excep ALIGN(8) : { *(.excep) } > text 
	
	.init ALIGN(8) : { *(.init*) } > text 

	.ctors ALIGN(8) : { *(.ctors*) } > text 

	.text ALIGN(8) : { *(.text*) } > text 

	.fini ALIGN(8) : { *(.fini*) } > text 

	.dtors ALIGN(8) : { *(.dtors*) } > text 

	.jcr ALIGN(8) : { *(.jcr*) } > text 

	.sdata ALIGN(8) : { *(.sdata*) *(.scommon*) } > text 

	.sbss ALIGN(0x8): { *(.sbss*) } > text 

	.rodata ALIGN(0x8) : { *(.rodata*) } > text 

	.reginfo ALIGN(0x8) : { *(.reginfo*) } > text 

	.data ALIGN(0x8) : { *(.data*) *(.glue_7*) *(.eh_frame*) } > text 

	.os_config ALIGN(0x8): {
		OS_N_DRIVERS = .; LONG(0x4)
		OS_DRIVERS_LIST = .; LONG(soclib_platform_module) LONG(rdv_module)
                         LONG(soclib_block_device_module) LONG(soclib_fb_module)
		
		OS_N_FILESYSTEMS = .; LONG(0x2)
		OS_FILESYSTEMS_LIST = .; LONG(devfs_module) LONG(rootfs_module)

		OS_N_EXTENSIONS = .; LONG(0x0)
		OS_EXTENSIONS_LIST = .; 

		OS_THREAD_STACK_SIZE = .; LONG(0x8000)

		OS_KERNEL_HEAP_ADDRESS = .; LONG(ADDR(.kheap))
		OS_USER_HEAP_ADDRESS = .; LONG(ADDR(.uheap))

		OS_KERNEL_HEAP_SIZE = .; LONG(0x100000)
	} > text 

	.hal ALIGN(0x8): {
		PLATFORM_DEBUG_CHARPORT = .; LONG(0xC1000000)
		APP_ENTRY_POINT = .; LONG(_main);

		CPU_ARMV6_COUNT = .; LONG(0x4)
		CPU_SVC_STACK_ADDR  = ABSOLUTE(ADDR(.sysstack));

		CPU_BSS_START = .; LONG(ADDR(.bss))
		CPU_BSS_END = .; LONG(__hal_bss_end)

		PLATFORM_TIMER_BASE = .; LONG(0xC2000000)
		PLATFORM_IPI_BASE = .; LONG(0xC3000000)
		PLATFORM_AICU_BASE = .; LONG(0xC4000000)

		SOCLIB_TTY_NDEV = .; LONG(0x1)
		SOCLIB_TTY_DEVICES = .; LONG(2) LONG(0xC1000000)

    SOCLIB_BLOCK_DEVICES_NDEV = .; LONG(0x1)
    SOCLIB_BLOCK_DEVICES = .; LONG(0x1) LONG(0x4) LONG(0xC6000000)

		SOCLIB_FB_NDEV = .; LONG(0x1)
		SOCLIB_FB_DEVICES = .; LONG(256) LONG(144) LONG(0xC5001000)

		CHANNEL_RDV_NDEV = .; LONG(24);
	} > text 

	.sysstack ALIGN(0x8) + 0x10000 : { } > text 

	.bss ALIGN(0x8): {
		*(.bss*) *(.rel*) *(COMMON) __hal_bss_end = .;
	} > text 

	.kheap ALIGN(0x8) : {} > text 

	.uheap ALIGN(0x8) + 0x100000: { _end = .;} > text 
}

